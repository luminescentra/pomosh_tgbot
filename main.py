import sqlite3
import logging
from telegram import ReplyKeyboardMarkup , ReplyKeyboardRemove , Update, InlineKeyboardMarkup , InlineKeyboardButton,Bot
from telegram.ext import Updater, CommandHandler , MessageHandler , Filters , ConversationHandler , CallbackQueryHandler, CallbackContext
import os
from telegram.utils.request import Request
from bot_pomosh.validators import validate_post_id
from datetime import datetime
from telegram import ParseMode
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

'''–ò–Ω–∏—Ü–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'''
START_BUTTON1_NEEDS_VIEW = 'start_button1'
START_BUTTON2_SHARES_VIEW = 'start_button2'
START_BUTTON3_ADD_POST = 'start_button3'
START_BUTTON_DELETE = 'start_button4'
START_BUTTON_INFO = 'start_button5'



def get_start_keyboard():
    inline_keyboard = [
        [InlineKeyboardButton( 'C–ø–∏—Å–æ–∫ –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—èüìã' , callback_data= START_BUTTON1_NEEDS_VIEW,),
        InlineKeyboardButton('C–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–º–æ—á—åüìí', callback_data= START_BUTTON2_SHARES_VIEW)],
        [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç‚úçÔ∏è', callback_data=START_BUTTON3_ADD_POST)],
        [InlineKeyboardButton( '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç‚ùî', callback_data=START_BUTTON_INFO)],
    ]
    return InlineKeyboardMarkup(inline_keyboard )



WHAT , NAME , TAG, DESCRIPTION , NUMBER , –°ONFIRMATION=  range(6)
ID , CONFIRM = range(6, 8 )

def add_new_post(update : Update , context : CallbackContext):

    return WHAT

def what(update : Update , context : CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥ –ø–æ—Å—Ç–∞
    query = update.callback_query
    data = query.data
    user_data = context.user_data
    user_data['type'] = data
    logger.info('type of post is %s', data)
    # –°–ø—Ä–æ—Å–∏—Ç—å –∏–º—è
    update.effective_message.reply_text(
        "–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç&#9989;\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:\n\n&#128071;&#128071;&#128071; ", parse_mode = ParseMode.HTML,
        reply_markup = ReplyKeyboardMarkup([[InlineKeyboardButton('–ê–Ω–æ–Ω–∏–º' , callback_data='–ê–Ω–æ–Ω–∏–º')]], resize_keyboard=True)
    )
    return NAME



def help_name(update : Update, context = CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å –∏–º—è
    user = update.message.from_user
    user_data = context.user_data
    category = 'name'
    text = update.message.text
    user_data[category] = text
    logger.info('Name of  %s %s', user.first_name, update.message.text )
    # –°–ø—Ä–æ—Å–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å—Ç–∞
    inline_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton('–ü—Ä–µ–ø–∞—Ä–∞—Ç' , callback_data='medecine'),InlineKeyboardButton('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ' , callback_data='equipment')],
            [InlineKeyboardButton('–£—Å–ª—É–≥–∞' , callback_data='kap'),InlineKeyboardButton('–û—á–µ—Ä–µ–¥—å ( –Ω–∞ —Ä–µ–Ω—Ç–≥–µ–Ω )' , callback_data='turn')],
            [InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='another')],
        ]
    )
    update.message.reply_text(
        text = '–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!&#9989;', parse_mode = ParseMode.HTML,
        reply_markup = ReplyKeyboardRemove()
    )
    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞.",
        reply_markup=inline_markup
    )
    return TAG

def help_tag(update:Update, context: CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    query = update.callback_query
    user_data = context.user_data
    category = 'tag'
    data = update.callback_query.data
    if data == 'medecine':
        text = '–ü—Ä–µ–ø–∞—Ä–∞—Ç'
    elif data == 'equipment':
        text = '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
    elif data == 'kap':
        text = '–£—Å–ª—É–≥–∞'
    elif data == 'turn':
        text = '–û—á–µ—Ä–µ–¥—å'
    elif data == 'another':
        text = '–î—Ä—É–≥–æ–µ'
    user_data[category] = text
    logger.info('Tag of  %s' ,text)
    # –°–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.bot.send_message(
        chat_id=update.effective_message.chat_id,
        text = "–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç&#9989;\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–æ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.\n\n&#128071;&#128071;&#128071;", parse_mode=ParseMode.HTML
    )
    return DESCRIPTION

def help_description(update : Update , context : CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    user_data = context.user_data
    category = 'description'
    text = update.message.text
    user_data[category] = text
    logger.info('Description  %s', update.message.text)
    # –°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
    update.message.reply_text(
        "–ü—Ä–∏–Ω—è—Ç–æ&#9989;\n—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.\n\n&#128071;&#128071;&#128071;" , parse_mode = ParseMode.HTML
    )
    return NUMBER

def help_number(update : Update, context : CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
    user = update.message.from_user
    user_data = context.user_data
    category = 'number'
    text = update.message.text
    user_data[category] = text
    logger.info('Number of %s %s', user.first_name, update.message.text)
    # –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    markup = ReplyKeyboardMarkup(
        [
            [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é' , callback_data="confirm")],
            [InlineKeyboardButton(text ='–û—Ç–º–µ–Ω–∞' , callback_data='cancel')],
        ],
    )
    logger.info('–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ %s' , str(datetime.now())[:10])
    user_data['date'] = str(datetime.now())[:10]
    update.message.reply_text(f'''–ü—Ä–∏–Ω—è—Ç–æ, –≤–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞&#128076;\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ—ë. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n
–í–∞—à–µ –∏–º—è - {user_data['name']}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è - {user_data['tag']}\n–û–ø–∏—Å–∞–Ω–∏–µ - {user_data['description']}\n–ö–æ–Ω—Ç–∞–∫—Ç—ã - {user_data['number']}\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - {user_data['date']}''',
        reply_markup = markup, parse_mode = ParseMode.HTML
    )

    return –°ONFIRMATION
import random
def help_confirmation(update : Update , context : CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_data = context.user_data
    user = update.message.from_user
    con = sqlite3.connect('Posts.sql')
    cursor = con.cursor()
    if update.message.text == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é':
        logger.info("%s Confirmed form", user.first_name)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        data = [user_data['name'] , user_data['tag'], user_data['description'], user_data['number'] , user_data['date']]
        post_id = random.randint(1000,10000)
        data.append(post_id)
        update.message.reply_text(
            "–í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞&#9989;\n\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ - {}".format(post_id),
            reply_markup=ReplyKeyboardRemove(),
            parse_mode = ParseMode.HTML
        )
        if user_data['type'] == 'need_help':
            logger.info('–î–æ–±–∞–≤–ª—è—é –ø–æ—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è')
            cursor.execute("INSERT into needs values ( ? , ? , ? , ? , ? , ?)", data)
            con.commit()
        elif user_data['type'] == 'share_help':
            logger.info('–î–æ–±–∞–≤–ª—è—é –ø–æ—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –∂–µ—Ä—Ç–≤—É—é—â–∏—Ö')
            cursor.execute("INSERT into shares values ( ? , ? , ? , ? , ? , ?)", data)
            con.commit()
        logger.info("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–º–µ—â–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
    elif update.message.text == '–û—Ç–º–µ–Ω–∞':
        logger.info("%s stoped to adding new post")
        update.message.reply_text(
        "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ",
        reply_markup = ReplyKeyboardRemove()
    )
    else:
        return –°ONFIRMATION
    update.message.reply_text('–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?',reply_markup = back_keyboard)
    return ConversationHandler.END

def cancel(update, context):
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    update.message.reply_text('–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã.',
                              reply_markup = back_keyboard)

    return ConversationHandler.END

back_keyboard = InlineKeyboardMarkup(
    inline_keyboard= [
        [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è',  callback_data='back')]#TODO —Å–º–∞–π–ª–∏–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–∫–∞—Ö
    ]
)

def get_paginator_keyboard(page , max_pages, type ):
    keyboard = [
        [
            InlineKeyboardButton( '‚óÄÔ∏è–ù–∞–∑–∞–¥' , callback_data= f'back_page_{type}'),
            InlineKeyboardButton( f'{page}/{max_pages}' , callback_data= '_none'),
            InlineKeyboardButton( '–í–ø–µ—Ä–µ–¥‚ñ∂Ô∏è' , callback_data= f'next_page_{type}'),
        ]
    ]
    keyboard.append([InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Ü©Ô∏è' , callback_data= 'back')])
    return InlineKeyboardMarkup(keyboard)


def needs_list_view(update  : Update , context : CallbackContext , type ):
    user_data = context.user_data
    page = user_data['page']
    try:
        for i in user_data['deletes']:
            context.bot.delete_message(update.effective_message.chat_id , i)
        user_data['deletes'] = []
    except:
        user_data['deletes'] = []
    if page < 1 :
        return
    end  = page* 6
    con = sqlite3.connect("Posts.sql")
    cursor = con.cursor()
    con.commit()
    cursor.execute(f'select * from {type}')
    if cursor.fetchall() == []:
        context.bot.send_message(chat_id= update.callback_query.message.chat_id ,
                                 text = "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏–π –ø–æ–∫–∞ –Ω–µ—Ç :(",
                                 )
    list = []

    s = []
    for row in cursor.execute(f"select * from {type}"):
        for i in row[:5]:
            s.append(i)
        list.append('–ò–º—è: {}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {}\n–û–ø–∏—Å–∞–Ω–∏–µ: {}\n–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {}\n\n–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {}'.format(s[0] , s[1] , s[2] , s[3] , s[4]))
        s = []
    max_pages = len(list) // 6
    if len(list) % 6 == 0:
        pass
    else:
        max_pages += 1
    if page > max_pages:
        return
    for i in range(end - 6 , end):
        try:
            if i == end -  1:
                user_data['deletes'].append(context.bot.send_message(chat_id=update.effective_message.chat_id, text=list[i] , reply_markup= get_paginator_keyboard(page , max_pages , type  )).message_id)
            else:
                user_data['deletes'].append(context.bot.send_message(chat_id=update.effective_message.chat_id ,text = list[i]).message_id)
        except IndexError:
            user_data['deletes'].append(context.bot.send_message(chat_id = update.effective_message.chat_id ,text  = '–ö–æ–Ω–µ—Ü' ,reply_markup= get_paginator_keyboard(page, max_pages , type)).message_id)
            break
    print(user_data['deletes'])

def test(update : Update , context : CallbackContext):
    context.user_data['deletes'] = []
    chat_id = update.message.chat_id
    for i in range(10):
        context.user_data['deletes'].append(context.bot.send_message(chat_id = chat_id , text = '–ü—Ä–∏–≤–µ—Ç —Å–º–æ—Ç—Ä–∏ 10 —Ä–∞–∑ —á–µ—Ç–æ –Ω–∞–ø–∏—à—É').message_id)
        print(update.effective_message.chat_id)
    context.bot.send_message(chat_id = chat_id , text= "–£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è?" , reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å' , callback_data= 'delete_test')]]) )


def do_start(update : Update, context : CallbackContext):
    context.bot.send_photo(chat_id=update.message.chat_id ,photo= 'https://imbt.ga/c3eYB0mjYC')
    context.bot.send_message(
        text = "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ –ø–æ–º–æ—â–∏. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—Å—è –µ—é –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ—ë\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å:",
        chat_id= update.message.chat_id,
        reply_markup = get_start_keyboard()
    )



def do_help(update : Update , context : CallbackContext ):
    context.bot.send_message(chat_id= update.effective_message.chat_id, text = '–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ' )
    context.bot.send_message(chat_id = update.effective_message.chat_id, text = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?' ,  reply_markup = back_keyboard)


"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è"""

def delete_post(update: Update , context : CallbackContext ):
    context.bot.send_message(chat_id= update.effective_message.chat_id , text= '–í—ã –≤ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞, –µ–≥–æ –≤—ã –ø–æ–ª—É—á–∞–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏ –ø–æ–º–æ—â–∏.\n\n&#128071;&#128071;&#128071;' , parse_mode=ParseMode.HTML)
    # —Å–ø—Ä–æ—Å–∏—Ç—å post_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return ID


def delete_id(update : Update , context : CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å post id
    post_id = update.message.text
    val = validate_post_id(post_id)
    if val:
        logger.info('post_id –ü—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é')
        context.user_data['post_id'] = post_id
        update.message.reply_text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ', reply_markup = ReplyKeyboardMarkup([[InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' , callback_data='sdfdsf'), InlineKeyboardButton('–û—Ç–º–µ–Ω–∞' , callback_data= "–ª—å–ª–≤—ã–∞–ª—ã")]]))
        return CONFIRM
    else:
        update.message.reply_text('–¢–∞–∫–æ–≥–æ id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return ID


def delete_confirm(update: Update, context = CallbackContext):
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    answer = update.message.text
    if answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        post_id = context.user_data["post_id"]
        logger.info('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ')
        con = sqlite3.connect('Posts.sql')
        cursor = con.cursor()
        cursor.execute("DELETE FROM shares WHERE post_id = {}".format(post_id))
        cursor.execute("DELETE FROM needs WHERE post_id = {}".format(post_id))
        con.commit()
        logger.info("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        update.message.reply_text('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö &#9989;, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–µ—Ä—Ç—ã —Å –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –Ω–∞—à–∏—Ö —Å–ø–∏—Å–∫–∞—Ö.' , reply_markup = ReplyKeyboardRemove() ,parse_mode = ParseMode.HTML)
    elif answer == '–û—Ç–º–µ–Ω–∞':
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ')
        update.message.reply_text('–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup= ReplyKeyboardRemove())
    update.message.reply_text('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?' , reply_markup = back_keyboard)
    return ConversationHandler.END



def start_keyboard_handler(update: Update, context : CallbackContext ):
    chat_id = update.callback_query.message.chat.id
    query = update.callback_query
    data = query.data
    current_text = update.effective_message.text
    if data == START_BUTTON1_NEEDS_VIEW:
        query.edit_message_text(
            text = '–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª—é–¥–µ–π –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –ø–æ–º–æ—â–∏',
        )
        context.user_data['page'] = 1
        return needs_list_view(update = update, context= context , type  = 'needs' )
    elif data == START_BUTTON2_SHARES_VIEW:
        query.edit_message_text(
            text = "–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ª—é–¥–µ–π –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–º–æ—á—å:"
        )
        context.user_data['page'] = 1
        return needs_list_view(update = update, context = context , type = 'shares')

    elif data == START_BUTTON3_ADD_POST:
        query.edit_message_text(text = '–ü–æ–∫–∞–∑—ã–≤–∞—é –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
        # –°–ø—Ä–æ—Å–∏—Ç—å –≤–∏–¥ –ø–æ—Å—Ç–∞
        context.bot.send_message(chat_id = chat_id,
            text = '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∞—è –Ω—É–∂–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data='need_help'),InlineKeyboardButton('–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å', callback_data='share_help')]])
        )

        return WHAT
    elif data == START_BUTTON_INFO:

        query.edit_message_text(text = "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ  –∏ –∫–∞–∫ —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å" ,reply_markup= back_keyboard,  parse_mode=ParseMode.HTML)

    elif data == 'back':
        query.edit_message_text(text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å:" ,reply_markup=get_start_keyboard())
    elif data == 'next_page_needs':
        context.user_data['page'] += 1
        return needs_list_view(update = update , context = context , type = 'needs')
    elif data == 'next_page_shares':
        context.user_data['page'] += 1
        return needs_list_view(update = update , context = context , type = 'shares')
    elif data == 'back_page_needs':
        context.user_data['page'] -= 1
        return needs_list_view(update=update, context=context, type='needs')
    elif data == 'back_page_shares':
        context.user_data['page'] -= 1
        return needs_list_view(update=update, context=context, type='shares')
    elif data == 'delete_test':
        for i in context.user_data['deletes']:
            context.bot.delete_message(chat_id , i)


def main():
    bot = Bot(
        token = "1226045587:AAHQgOJ6e9mvH3jQPFwHaJBLVyOsGs2iPCU",
    )
    updater = Updater(
        bot = bot,
        use_context=True,
    )

    print(updater.bot.get_me())
    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_keyboard_handler)],

        states = {
            WHAT : [CallbackQueryHandler(what , pass_user_data=True)],

            NAME : [MessageHandler(Filters.text , help_name , pass_user_data = True )],

            TAG : [CallbackQueryHandler(help_tag, pass_user_data=True )],

            DESCRIPTION : [MessageHandler(Filters.text, help_description ,  pass_user_data=True)],

            NUMBER : [MessageHandler(Filters.text , help_number ,pass_user_data = True )],

            –°ONFIRMATION : [MessageHandler(Filters.text,help_confirmation, pass_user_data=True), ],
        },
        fallbacks= [CommandHandler('cancel', cancel)]

    )
    delete_conv = ConversationHandler(
        entry_points= [CommandHandler('delete' , callback = delete_post)],
        states={
            ID : [MessageHandler(Filters.text , delete_id , pass_user_data=True)],
            CONFIRM : [MessageHandler(Filters.text , delete_confirm , pass_user_data=True)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    updater.dispatcher.add_handler(conv)
    updater.dispatcher.add_handler(delete_conv)
    updater.dispatcher.add_handler(CallbackQueryHandler( callback= start_keyboard_handler))
    updater.dispatcher.add_handler(CommandHandler('start' , callback = do_start))
    updater.dispatcher.add_handler(CommandHandler('help', callback=do_help))
    updater.dispatcher.add_handler(CommandHandler('test' , callback= test))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
